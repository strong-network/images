name: Trivy scan image
description: Scan the specified image with trivy and save the results
inputs:
  image-name:  # id of input
    description: Name of the image 
    required: true
  make-command:
    description: 'which make command to run'
    required: true
  upload-data:
    description: Decide if we want to call a webhook
    default: 'false'
  jira-base-url:
    description: 'URL of the Jira instance'
    required: true
  jira-user-email:
    description: 'Email for Jira authentication'
    required: true
  jira-api-token:
    description: 'API token for Jira authentication'
    required: true

runs:
  using: "composite"
  steps:

    - name: build base
      shell: bash
      run: |
        make ${{ inputs.make-command }}
        docker save -o image.tar ${{ inputs.image-name }}

    - if: ${{ inputs.upload-data == 'false' }}
      name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        format: 'table'
        ignore-unfixed: true
        input: image.tar
        scan-type: image
        security-checks: vuln

    - if: ${{ inputs.upload-data == 'true' }}
      name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        format: 'json'
        ignore-unfixed: true
        input: image.tar
        scan-type: image
        security-checks: vuln
        output:  ${{ inputs.image-name}}.json
        exit-code: '1'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true

    - if: steps.trivy-scan.outcome == 'failure' && inputs.upload-data == 'true'
      name: Create Jira Ticket on Failure
      uses: atlassian/gajira-create@v3
      with:
        project: PLAT
        issuetype: 'Bug'
        summary: 'Security Vulnerabilities Detected in ${{ github.repository }}'
        description: |
          A Trivy scan has identified one or more CRITICAL or HIGH severity vulnerabilities.

          *Repository*: ${{ github.repository }}
          *Commit*: ${{ github.sha }}
          *Triggered by*: ${{ github.actor }}

          Please review the attached `${{ inputs.image-name}}.json` artifact in the GitHub Actions run for full details.

      env:
        JIRA_BASE_URL: ${{ inputs.jira-base-url }}
        JIRA_USER_EMAIL: ${{ inputs.jira-user-email }}
        JIRA_API_TOKEN: ${{ inputs.jira-api-token }}