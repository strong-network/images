name: Run trivy scans

on:
  workflow_dispatch:
  schedule:
    - cron: "0 7 * * 1"

jobs:
  scan-base:
    runs-on: ubuntu-22.04
    outputs:
      jira-issue-data: ${{ steps.output_output.outputs.jira-issue-data-key }}

    steps:
      - uses: actions/checkout@v3

      - name: Make base image env
        run: |
          echo BASE_IMAGE=$(make get_base_image) >> $GITHUB_ENV

      - uses: ./.github/actions/scan-image
        id: scan_image_step
        name: scan base image
        with:
          image-name: ${{ env.BASE_IMAGE }}
          make-command: base_image
          upload-data: ${{ github.event_name == 'schedule' }}
          jira-base-url: ${{ secrets.JIRA_BASE_URL }}
          jira-user-email: ${{ secrets.JIRA_USER_EMAIL }}
          jira-api-token: ${{ secrets.JIRA_API_TOKEN }}
      - name: Output the output
        id: output_output
        run: |
          {
            echo 'jira-issue-data-key<<EOF'
            echo "${{ steps.scan_image_step.outputs.jira-issue-data && format('{0}', fromJSON(steps.scan_image_step.outputs.jira-issue-data).key) || '' }}"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  scan-generic:
    runs-on: ubuntu-22.04
    outputs:
      jira-issue-data: ${{ steps.scan_image_step.outputs.jira-issue-data }}

    steps:
      - uses: actions/checkout@v3

      - name: Make generic image env
        run: |
          echo GENERIC_IMAGE=$(make get_generic_image) >> $GITHUB_ENV
      - uses: ./.github/actions/scan-image
        id: scan_image_step
        name: scan image
        with:
          image-name: ${{ env.GENERIC_IMAGE }}
          make-command: generic_image
          upload-data: ${{ github.event_name == 'schedule' }}
          jira-base-url: ${{ secrets.JIRA_BASE_URL }}
          jira-user-email: ${{ secrets.JIRA_USER_EMAIL }}
          jira-api-token: ${{ secrets.JIRA_API_TOKEN }}
      - name: Output the output
        id: output_output
        run: |
          {
            echo 'jira-issue-data-key<<EOF'
            echo "${{ steps.scan_image_step.outputs.jira-issue-data && format('{0}', fromJSON(steps.scan_image_step.outputs.jira-issue-data).key) || '' }}"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
  scan-generic-jfrog:
    runs-on: ubuntu-22.04
    outputs:
      jira-issue-data: ${{ steps.output_output.outputs.jira-issue-data-key }}
    steps:
      - uses: actions/checkout@v3

      - name: Make generic jfrog image env
        run: |
          echo GENERIC_JFROG_IMAGE=$(make get_generic_jfrog_image) >> $GITHUB_ENV
      - uses: ./.github/actions/scan-image
        id: scan_image_step
        name: scan image
        with:
          image-name: ${{ env.GENERIC_JFROG_IMAGE }}
          make-command: generic_jfrog_image
          upload-data: ${{ github.event_name == 'schedule' }}
          jira-base-url: ${{ secrets.JIRA_BASE_URL }}
          jira-user-email: ${{ secrets.JIRA_USER_EMAIL }}
          jira-api-token: ${{ secrets.JIRA_API_TOKEN }}
      - name: Output the output
        id: output_output
        run: |
          {
            echo 'jira-issue-data-key<<EOF'
            echo "${{ steps.scan_image_step.outputs.jira-issue-data && format('{0}', fromJSON(steps.scan_image_step.outputs.jira-issue-data).key) || '' }}"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  scan-sysbox-generic:
    runs-on: ubuntu-22.04
    outputs:
      jira-issue-data: ${{ steps.output_output.outputs.jira-issue-data-key }}
    steps:
      - uses: actions/checkout@v3

      - name: Make generic sysbox env
        run: |
          echo SYSBOX_GENERIC_IMAGE=$(make get_sysbox_generic_image) >> $GITHUB_ENV

      - uses: ./.github/actions/scan-image
        id: scan_image_step
        name: scan image
        with:
          image-name: ${{ env.SYSBOX_GENERIC_IMAGE }}
          make-command: generic_sysbox_image
          upload-data: ${{ github.event_name == 'schedule' }}
          jira-base-url: ${{ secrets.JIRA_BASE_URL }}
          jira-user-email: ${{ secrets.JIRA_USER_EMAIL }}
          jira-api-token: ${{ secrets.JIRA_API_TOKEN }}
      - name: Output the output
        id: output_output
        run: |
          {
            echo 'jira-issue-data-key<<EOF'
            echo "${{ steps.scan_image_step.outputs.jira-issue-data && format('{0}', fromJSON(steps.scan_image_step.outputs.jira-issue-data).key) || '' }}"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  scan-gui-debian:
    runs-on: ubuntu-22.04
    outputs:
      jira-issue-data: ${{ steps.output_output.outputs.jira-issue-data-key }}
    steps:
      - uses: actions/checkout@v3

      - name: Make generic sysbox env
        run: |
          echo GUI_DEBIAN_IMAGE=$(make get_gui_debian_image) >> $GITHUB_ENV

      - uses: ./.github/actions/scan-image
        id: scan_image_step
        name: scan image
        with:
          image-name: ${{ env.GUI_DEBIAN_IMAGE }}
          make-command: gui_debian
          upload-data: ${{ github.event_name == 'schedule' }}
          jira-base-url: ${{ secrets.JIRA_BASE_URL }}
          jira-user-email: ${{ secrets.JIRA_USER_EMAIL }}
          jira-api-token: ${{ secrets.JIRA_API_TOKEN }}
      - name: Output the output
        id: output_output
        run: |
          {
            echo 'jira-issue-data-key<<EOF'
            echo "${{ steps.scan_image_step.outputs.jira-issue-data && format('{0}', fromJSON(steps.scan_image_step.outputs.jira-issue-data).key) || '' }}"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  scan-gui-ubuntu:
    runs-on: ubuntu-22.04
    outputs:
      jira-issue-data: ${{ steps.output_output.outputs.jira-issue-data-key }}
    steps:
      - uses: actions/checkout@v3

      - name: Make generic ubuntu env
        run: |
          echo GUI_UBUNTU_IMAGE=$(make get_gui_ubuntu_base_image) >> $GITHUB_ENV

      - uses: ./.github/actions/scan-image
        id: scan_image_step
        name: scan image
        with:
          image-name: ${{ env.GUI_UBUNTU_IMAGE }}
          make-command: gui_ubuntu_base_image
          upload-data: ${{ github.event_name == 'schedule' }}
          jira-base-url: ${{ secrets.JIRA_BASE_URL }}
          jira-user-email: ${{ secrets.JIRA_USER_EMAIL }}
          jira-api-token: ${{ secrets.JIRA_API_TOKEN }}
      - name: Output the output
        id: output_output
        run: |
          {
            echo 'jira-issue-data-key<<EOF'
            echo "${{ steps.scan_image_step.outputs.jira-issue-data && format('{0}', fromJSON(steps.scan_image_step.outputs.jira-issue-data).key) || '' }}"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  scan-ubuntu-18:
    runs-on: ubuntu-22.04
    outputs:
      jira-issue-data: ${{ steps.output_output.outputs.jira-issue-data-key }}
    steps:
      - uses: actions/checkout@v3

      - name: Make ubuntu 18 env
        run: |
          echo GUI_UBUNTU_18_IMAGE=$(make get_base18_image) >> $GITHUB_ENV

      - uses: ./.github/actions/scan-image
        id: scan_image_step
        name: scan image
        with:
          image-name: ${{ env.GUI_UBUNTU_18_IMAGE }}
          make-command: base18_image
          upload-data: ${{ github.event_name == 'schedule' }}
          jira-base-url: ${{ secrets.JIRA_BASE_URL }}
          jira-user-email: ${{ secrets.JIRA_USER_EMAIL }}
          jira-api-token: ${{ secrets.JIRA_API_TOKEN }}
      - name: Output the output
        id: output_output
        run: |
          {
            echo 'jira-issue-data-key<<EOF'
            echo "${{ steps.scan_image_step.outputs.jira-issue-data && format('{0}', fromJSON(steps.scan_image_step.outputs.jira-issue-data).key) || '' }}"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  scan-centos:
    runs-on: ubuntu-22.04
    outputs:
      jira-issue-data: ${{ steps.output_output.outputs.jira-issue-data-key }}
    steps:
      - uses: actions/checkout@v3

      - name: Make CentOS env
        run: |
          echo CENTOS_IMAGE=$(make get_centos_base_image) >> $GITHUB_ENV

      - uses: ./.github/actions/scan-image
        id: scan_image_step
        name: scan image
        with:
          image-name: ${{ env.CENTOS_IMAGE }}
          make-command: centos_base_image
          upload-data: ${{ github.event_name == 'schedule' }}
          jira-base-url: ${{ secrets.JIRA_BASE_URL }}
          jira-user-email: ${{ secrets.JIRA_USER_EMAIL }}
          jira-api-token: ${{ secrets.JIRA_API_TOKEN }}
      - name: Output the output
        id: output_output
        run: |
          {
            echo 'jira-issue-data-key<<EOF'
            echo "${{ steps.scan_image_step.outputs.jira-issue-data && format('{0}', fromJSON(steps.scan_image_step.outputs.jira-issue-data).key) || '' }}"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  scan-minimal-alpine:
    runs-on: ubuntu-22.04
    outputs:
      jira-issue-data: ${{ steps.output_output.outputs.jira-issue-data-key }}
    steps:
      - uses: actions/checkout@v3

      - name: Make Minimal Alpine env
        run: |
          echo MINIMAL_ALPINE_IMAGE=$(make get_minimal_alpine_image) >> $GITHUB_ENV

      - uses: ./.github/actions/scan-image
        id: scan_image_step
        name: scan image
        with:
          image-name: ${{ env.MINIMAL_ALPINE_IMAGE }}
          make-command: minimal_alpine_image
          upload-data: ${{ github.event_name == 'schedule' }}
          jira-base-url: ${{ secrets.JIRA_BASE_URL }}
          jira-user-email: ${{ secrets.JIRA_USER_EMAIL }}
          jira-api-token: ${{ secrets.JIRA_API_TOKEN }}
      - name: Output the output
        id: output_output
        run: |
          {
            echo 'jira-issue-data-key<<EOF'
            echo "${{ steps.scan_image_step.outputs.jira-issue-data && format('{0}', fromJSON(steps.scan_image_step.outputs.jira-issue-data).key) || '' }}"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  scan-minimal-rhel9:
    runs-on: ubuntu-22.04
    outputs:
      jira-issue-data: ${{ steps.output_output.outputs.jira-issue-data-key }}
    steps:
      - uses: actions/checkout@v3

      - name: Make Minimal RHEL9 env
        run: |
          echo MINIMAL_RHEL9_IMAGE=$(make get_minimal_rhel9_image) >> $GITHUB_ENV

      - uses: ./.github/actions/scan-image
        id: scan_image_step
        name: scan image
        with:
          image-name: ${{ env.MINIMAL_RHEL9_IMAGE }}
          make-command: minimal_rhel9_image
          upload-data: ${{ github.event_name == 'schedule' }}
          jira-base-url: ${{ secrets.JIRA_BASE_URL }}
          jira-user-email: ${{ secrets.JIRA_USER_EMAIL }}
          jira-api-token: ${{ secrets.JIRA_API_TOKEN }}
      - name: Output the output
        id: output_output
        run: |
          {
            echo 'jira-issue-data-key<<EOF'
            echo "${{ steps.scan_image_step.outputs.jira-issue-data && format('{0}', fromJSON(steps.scan_image_step.outputs.jira-issue-data).key) || '' }}"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  slack-summary:
    runs-on: ubuntu-latest
    needs: [scan-base, scan-generic, scan-generic-jfrog, scan-sysbox-generic, scan-gui-debian, scan-gui-ubuntu, scan-ubuntu-18, scan-centos, scan-minimal-alpine, scan-minimal-rhel9]
    if: always() && github.event_name == 'schedule'
    steps:
      - name: Send Workflow Summary
        uses: act10ns/slack@v2
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: failure # The overall status is failure if any job fails
          message: |
            Workflow Summary for `${{ github.workflow }}` on `${{ github.ref_name }}`:

            - *Base Image:* ${{ needs.scan-base.result == 'success' && '✅ Passed' || '❌ Failed' }}
            ${{ needs.scan-base.result == 'success' && needs.scan-base.outputs.jira-issue-data != '' && format('A Jira ticket has been created: {0}/browse/{1}', 'https://strong-network-citrix.atlassian.net', needs.scan-base.outputs.jira-issue-data) || '' }}

            - *Generic Image:* ${{ needs.scan-generic.result == 'success' && '✅ Passed' || '❌ Failed' }}
            ${{ needs.scan-generic.result == 'success' && needs.scan-generic.outputs.jira-issue-data != '' && format('A Jira ticket has been created: {0}/browse/{1}', 'https://strong-network-citrix.atlassian.net', needs.scan-generic.outputs.jira-issue-data) || '' }}

            - *Generic JFrog Image:* ${{ needs.scan-generic-jfrog.result == 'success' && '✅ Passed' || '❌ Failed' }}
            ${{ needs.scan-generic-jfrog.result == 'success' && needs.scan-generic-jfrog.outputs.jira-issue-data != '' && format('A Jira ticket has been created: {0}/browse/{1}', 'https://strong-network-citrix.atlassian.net', needs.scan-generic-jfrog.outputs.jira-issue-data) || '' }}

            - *Generic Sysbox Image:* ${{ needs.scan-sysbox-generic.result == 'success' && '✅ Passed' || '❌ Failed' }}
            ${{ needs.scan-sysbox-generic.result == 'success' && needs.scan-sysbox-generic.outputs.jira-issue-data != '' && format('A Jira ticket has been created: {0}/browse/{1}', 'https://strong-network-citrix.atlassian.net', needs.scan-sysbox-generic.outputs.jira-issue-data) || '' }}

            - *GUI Debian Image:* ${{ needs.scan-gui-debian.result == 'success' && '✅ Passed' || '❌ Failed' }}
            ${{ needs.scan-gui-debian.result == 'success' && needs.scan-gui-debian.outputs.jira-issue-data != '' && format('A Jira ticket has been created: {0}/browse/{1}', 'https://strong-network-citrix.atlassian.net', needs.scan-gui-debian.outputs.jira-issue-data) || '' }}

            - *GUI Ubuntu Image:* ${{ needs.scan-gui-ubuntu.result == 'success' && '✅ Passed' || '❌ Failed' }}
            ${{ needs.scan-gui-ubuntu.result == 'success' && needs.scan-gui-ubuntu.outputs.jira-issue-data != '' && format('A Jira ticket has been created: {0}/browse/{1}', 'https://strong-network-citrix.atlassian.net', needs.scan-gui-ubuntu.outputs.jira-issue-data) || '' }}
            
            - *Ubuntu 18 Image:* ${{ needs.scan-ubuntu-18.result == 'success' && '✅ Passed' || '❌ Failed' }}
            ${{ needs.scan-ubuntu-18.result == 'success' && needs.scan-ubuntu-18.outputs.jira-issue-data != '' && format('A Jira ticket has been created: {0}/browse/{1}', 'https://strong-network-citrix.atlassian.net', needs.scan-ubuntu-18.outputs.jira-issue-data) || '' }}

            - *CentOS 7 Image:* ${{ needs.scan-centos.result == 'success' && '✅ Passed' || '❌ Failed' }}
            ${{ needs.scan-centos.result == 'success' && needs.scan-centos.outputs.jira-issue-data != '' && format('A Jira ticket has been created: {0}/browse/{1}', 'https://strong-network-citrix.atlassian.net', needs.scan-centos.outputs.jira-issue-data) || '' }}

            - *Minimal Alpine Image:* ${{ needs.scan-minimal-alpine.result == 'success' && '✅ Passed' || '❌ Failed' }}
            ${{ needs.scan-minimal-alpine.result == 'success' && needs.scan-minimal-alpine.outputs.jira-issue-data != '' && format('A Jira ticket has been created: {0}/browse/{1}', 'https://strong-network-citrix.atlassian.net', needs.scan-minimal-alpine.outputs.jira-issue-data) || '' }}

            - *Minimal RHEL9 Image:* ${{ needs.scan-minimal-rhel9.result == 'success' && '✅ Passed' || '❌ Failed' }}
            ${{ needs.scan-minimal-rhel9.result == 'success' && needs.scan-minimal-rhel9.outputs.jira-issue-data != '' && format('A Jira ticket has been created: {0}/browse/{1}', 'https://strong-network-citrix.atlassian.net', needs.scan-minimal-rhel9.outputs.jira-issue-data) || '' }}           
